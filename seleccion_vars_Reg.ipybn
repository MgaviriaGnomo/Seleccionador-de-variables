{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"BC_logotipo.png\" style=\"width:180px;height:50px\"> \n",
    "<h3><p style=\"color:gold\">Seleccionador de Variables para modelos analiticos</p></h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'seleccionador' from 'd:\\\\mgaviria\\\\Documents\\\\Documentos\\\\Plantillas\\\\Seleccion de variables\\\\venv\\\\Seleccion de variables V201\\\\seleccionador.py'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pd.set_option('display.max_rows', 100)\n",
    "import sys\n",
    "import time\n",
    "import os\n",
    "from pathlib import Path\n",
    "import pandas as pd\n",
    "import datetime\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import random\n",
    "import lightgbm as lgb\n",
    "import xgboost as xgb\n",
    "from random import randint\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegressionCV, RidgeClassifierCV\n",
    "from helper.helper import Helper\n",
    "import matplotlib.pyplot as plt\n",
    "import seleccionador as sel # Script que te pas√©\n",
    "import importlib\n",
    "importlib.reload(sel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-02-03 17:06:07 - [WARNING] - No se encontro la carpeta \"d:\\mgaviria\\Documents\\Documentos\\Plantillas\\Seleccion de variables\\venv\\Seleccion de variables V201\\logs\" para guardar los logs\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ __  __ ____   _    _        _    \n",
      "|_ _|  \\/  |  _ \\ / \\  | |      / \\   \n",
      " | || |\\/| | |_) / _ \\ | |     / _ \\  \n",
      " | || |  | |  __/ ___ \\| |___ / ___ \\ \n",
      "|___|_|  |_|_| /_/   \\_\\_____/_/   \\_\\\n",
      "                                      \n",
      " _   _ _____ _     ____  _____ ____  \n",
      "| | | | ____| |   |  _ \\| ____|  _ \\ \n",
      "| |_| |  _| | |   | |_) |  _| | |_) |\n",
      "|  _  | |___| |___|  __/| |___|  _ < \n",
      "|_| |_|_____|_____|_|   |_____|_| \\_\\\n",
      "                                     \n",
      "\n"
     ]
    }
   ],
   "source": [
    "ih = Helper(dsn=\"impala-prod\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> <p style=\"color:gold\">Cargar el Dataset</p></h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# CARGA BASE\n",
    "# base_train = ih.obtener_dataframe(\"\"\"\n",
    "#                                   select * from resultados_bam_vpr.cob_propen_16005_base_modelacion\n",
    "#                                   \"\"\")\n",
    "\n",
    "# base_train_sample = base_train.sample(100000)\n",
    "# base_train_sample = base_train\n",
    "\n",
    "# base_train_sample = base_train_sample.apply(pd.to_numeric, errors='ignore', axis=1)\n",
    "\n",
    "base_train = pd.read_excel(r\"D:\\mgaviria\\Documents\\mtcars.xlsx\")\n",
    "base_train_sample = base_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "model    0\n",
       "mpg      0\n",
       "cyl      0\n",
       "disp     0\n",
       "hp       0\n",
       "drat     0\n",
       "wt       0\n",
       "qsec     0\n",
       "vs       0\n",
       "am       0\n",
       "gear     0\n",
       "carb     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# base_train_sample = base_train_sample.fillna(base_train_sample.mean())\n",
    "base_train_sample.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(32, 12)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>mpg</th>\n",
       "      <th>cyl</th>\n",
       "      <th>disp</th>\n",
       "      <th>hp</th>\n",
       "      <th>drat</th>\n",
       "      <th>wt</th>\n",
       "      <th>qsec</th>\n",
       "      <th>vs</th>\n",
       "      <th>am</th>\n",
       "      <th>gear</th>\n",
       "      <th>carb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mazda RX4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.90</td>\n",
       "      <td>2.620</td>\n",
       "      <td>16.46</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mazda RX4 Wag</td>\n",
       "      <td>21.0</td>\n",
       "      <td>6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.90</td>\n",
       "      <td>2.875</td>\n",
       "      <td>17.02</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Datsun 710</td>\n",
       "      <td>22.8</td>\n",
       "      <td>4</td>\n",
       "      <td>108.0</td>\n",
       "      <td>93</td>\n",
       "      <td>3.85</td>\n",
       "      <td>2.320</td>\n",
       "      <td>18.61</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hornet 4 Drive</td>\n",
       "      <td>21.4</td>\n",
       "      <td>6</td>\n",
       "      <td>258.0</td>\n",
       "      <td>110</td>\n",
       "      <td>3.08</td>\n",
       "      <td>3.215</td>\n",
       "      <td>19.44</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Hornet Sportabout</td>\n",
       "      <td>18.7</td>\n",
       "      <td>8</td>\n",
       "      <td>360.0</td>\n",
       "      <td>175</td>\n",
       "      <td>3.15</td>\n",
       "      <td>3.440</td>\n",
       "      <td>17.02</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Valiant</td>\n",
       "      <td>18.1</td>\n",
       "      <td>6</td>\n",
       "      <td>225.0</td>\n",
       "      <td>105</td>\n",
       "      <td>2.76</td>\n",
       "      <td>3.460</td>\n",
       "      <td>20.22</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Duster 360</td>\n",
       "      <td>14.3</td>\n",
       "      <td>8</td>\n",
       "      <td>360.0</td>\n",
       "      <td>245</td>\n",
       "      <td>3.21</td>\n",
       "      <td>3.570</td>\n",
       "      <td>15.84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Merc 240D</td>\n",
       "      <td>24.4</td>\n",
       "      <td>4</td>\n",
       "      <td>146.7</td>\n",
       "      <td>62</td>\n",
       "      <td>3.69</td>\n",
       "      <td>3.190</td>\n",
       "      <td>20.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Merc 230</td>\n",
       "      <td>22.8</td>\n",
       "      <td>4</td>\n",
       "      <td>140.8</td>\n",
       "      <td>95</td>\n",
       "      <td>3.92</td>\n",
       "      <td>3.150</td>\n",
       "      <td>22.90</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Merc 280</td>\n",
       "      <td>19.2</td>\n",
       "      <td>6</td>\n",
       "      <td>167.6</td>\n",
       "      <td>123</td>\n",
       "      <td>3.92</td>\n",
       "      <td>3.440</td>\n",
       "      <td>18.30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               model   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
       "0          Mazda RX4  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4   \n",
       "1      Mazda RX4 Wag  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4   \n",
       "2         Datsun 710  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4   \n",
       "3     Hornet 4 Drive  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3   \n",
       "4  Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3   \n",
       "5            Valiant  18.1    6  225.0  105  2.76  3.460  20.22   1   0     3   \n",
       "6         Duster 360  14.3    8  360.0  245  3.21  3.570  15.84   0   0     3   \n",
       "7          Merc 240D  24.4    4  146.7   62  3.69  3.190  20.00   1   0     4   \n",
       "8           Merc 230  22.8    4  140.8   95  3.92  3.150  22.90   1   0     4   \n",
       "9           Merc 280  19.2    6  167.6  123  3.92  3.440  18.30   1   0     4   \n",
       "\n",
       "   carb  \n",
       "0     4  \n",
       "1     4  \n",
       "2     1  \n",
       "3     1  \n",
       "4     2  \n",
       "5     1  \n",
       "6     4  \n",
       "7     2  \n",
       "8     2  \n",
       "9     4  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(base_train_sample.shape)\n",
    "base_train_sample.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\mgaviria\\AppData\\Roaming\\Python\\Python37\\site-packages\\ipykernel_launcher.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "base_train_sample = base_train_sample.fillna(base_train_sample.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Listas de covariables NO cualitativas y variable respuesta\n",
    "\n",
    "#columnasNo=base_train_sample.columns[(base_train_sample.dtypes==\"object\").to_list()].to_list()\n",
    "feats_todas = base_train_sample.drop(columns=[\"model\",\"mpg\"]).columns.to_list() # lista de solo covariables\n",
    "#feats_todas = base_train_sample.columns.to_list()[2:]\n",
    "target = [\"mpg\"] # variable respuesta\n",
    "\n",
    "# \n",
    "X_base_con_imputaciones = base_train_sample[feats_todas] # DataFrame con las covariables\n",
    "y_base_con_imputaciones = base_train_sample[target] # DataFrame con la variable respuesta"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3><p style=\"color:gold\">Seleccion de variables <b>Arboles</b> y <b>Regresi√≥n Ridge</b></p></h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "d:\\mgaviria\\Documents\\Documentos\\Plantillas\\Seleccion de variables\\venv\\Seleccion de variables V201\\seleccionador.py:47: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X[\"random_normal\"] = np.random.normal(0, 1, size=(X.shape[0]))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Preparando tablas para el modelamiento ... ---\n",
      "    0:00:00.001961 runtime \n",
      "--- RandomForest - Seleccionando y entrenando el mejor modelo con GridSearchCV ... ---\n",
      "0\n",
      "rn:5\n",
      "0\n",
      "    0:00:00 runtime \n",
      "Fitting 3 folds for each of 2 candidates, totalling 6 fits\n",
      "[CV] END .............max_depth=5, n_estimators=5, n_jobs=-1; total time=   4.4s\n",
      "[CV] END .............max_depth=5, n_estimators=5, n_jobs=-1; total time=   0.0s\n",
      "[CV] END .............max_depth=5, n_estimators=5, n_jobs=-1; total time=   0.0s\n",
      "[CV] END ............max_depth=5, n_estimators=10, n_jobs=-1; total time=   0.1s\n",
      "[CV] END ............max_depth=5, n_estimators=10, n_jobs=-1; total time=   0.0s\n",
      "[CV] END ............max_depth=5, n_estimators=10, n_jobs=-1; total time=   0.1s\n",
      "    0:00:05.500770 runtime \n",
      "1\n",
      "rn:25\n",
      "1\n",
      "    0:00:05.502100 runtime \n",
      "Fitting 3 folds for each of 2 candidates, totalling 6 fits\n",
      "[CV] END ............max_depth=25, n_estimators=5, n_jobs=-1; total time=   0.0s\n",
      "[CV] END ............max_depth=25, n_estimators=5, n_jobs=-1; total time=   0.0s\n",
      "[CV] END ............max_depth=25, n_estimators=5, n_jobs=-1; total time=   0.0s\n",
      "[CV] END ..........max_depth=25, n_estimators=100, n_jobs=-1; total time=   0.1s\n",
      "[CV] END ..........max_depth=25, n_estimators=100, n_jobs=-1; total time=   0.1s\n",
      "[CV] END ..........max_depth=25, n_estimators=100, n_jobs=-1; total time=   0.1s\n",
      "    0:00:06.860780 runtime \n",
      "--- Ridge  ---\n",
      "    0:00:06.891691 runtime \n"
     ]
    }
   ],
   "source": [
    "# selecci√≥n de variables usando RF y ridge. \n",
    "# base con las variables explicativas\n",
    "# base con la y\n",
    "# numero de iteraciones de arboles\n",
    "# Ruido = 1 genera la base con los ruidos uniforme y normal \n",
    "res_sel_features = sel.mejores_variables_rf(X_base_con_imputaciones,\n",
    "                                        np.ravel(y_base_con_imputaciones),\n",
    "                                        2, ruidos = 1, ridge_flag = 1, folds=3, seed = 42, type = \"reg\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variable</th>\n",
       "      <th>importancia_rf_0</th>\n",
       "      <th>rank_rf_0</th>\n",
       "      <th>importancia</th>\n",
       "      <th>importancia_rf_1</th>\n",
       "      <th>rank_rf_1</th>\n",
       "      <th>importancia_ridge</th>\n",
       "      <th>rank_ridge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>random_normal</td>\n",
       "      <td>0.018136</td>\n",
       "      <td>9.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0.020711</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.366684</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>wt</td>\n",
       "      <td>0.495688</td>\n",
       "      <td>12.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.279431</td>\n",
       "      <td>12.0</td>\n",
       "      <td>-1.364410</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>hp</td>\n",
       "      <td>0.236051</td>\n",
       "      <td>11.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.275208</td>\n",
       "      <td>11.0</td>\n",
       "      <td>-0.835076</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>disp</td>\n",
       "      <td>0.224572</td>\n",
       "      <td>10.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.242167</td>\n",
       "      <td>10.0</td>\n",
       "      <td>-0.669571</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>drat</td>\n",
       "      <td>0.001311</td>\n",
       "      <td>5.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.018830</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.533610</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>qsec</td>\n",
       "      <td>0.013987</td>\n",
       "      <td>8.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.014710</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.170223</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>random_uniforme</td>\n",
       "      <td>0.007599</td>\n",
       "      <td>7.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0.015249</td>\n",
       "      <td>6.0</td>\n",
       "      <td>-0.125734</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cyl</td>\n",
       "      <td>0.000081</td>\n",
       "      <td>4.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.128587</td>\n",
       "      <td>9.0</td>\n",
       "      <td>-0.590377</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>am</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.000857</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.790281</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>gear</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.001386</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.484502</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>vs</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.001197</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.289034</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>carb</td>\n",
       "      <td>0.002576</td>\n",
       "      <td>6.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.001669</td>\n",
       "      <td>4.0</td>\n",
       "      <td>-0.919113</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           variable  importancia_rf_0  rank_rf_0  importancia  \\\n",
       "3     random_normal          0.018136        9.0         26.0   \n",
       "0                wt          0.495688       12.0         25.0   \n",
       "1                hp          0.236051       11.0         25.0   \n",
       "2              disp          0.224572       10.0         24.0   \n",
       "7              drat          0.001311        5.0         23.0   \n",
       "4              qsec          0.013987        8.0         20.0   \n",
       "5   random_uniforme          0.007599        7.0         19.0   \n",
       "8               cyl          0.000081        4.0         18.0   \n",
       "10               am          0.000000        3.0         16.0   \n",
       "11             gear          0.000000        3.0         16.0   \n",
       "9                vs          0.000000        3.0         13.0   \n",
       "6              carb          0.002576        6.0         12.0   \n",
       "\n",
       "    importancia_rf_1  rank_rf_1  importancia_ridge  rank_ridge  \n",
       "3           0.020711        8.0           0.366684         9.0  \n",
       "0           0.279431       12.0          -1.364410         1.0  \n",
       "1           0.275208       11.0          -0.835076         3.0  \n",
       "2           0.242167       10.0          -0.669571         4.0  \n",
       "7           0.018830        7.0           0.533610        11.0  \n",
       "4           0.014710        5.0           0.170223         7.0  \n",
       "5           0.015249        6.0          -0.125734         6.0  \n",
       "8           0.128587        9.0          -0.590377         5.0  \n",
       "10          0.000857        1.0           0.790281        12.0  \n",
       "11          0.001386        3.0           0.484502        10.0  \n",
       "9           0.001197        2.0           0.289034         8.0  \n",
       "6           0.001669        4.0          -0.919113         2.0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_sel_features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3><p style=\"color:gold\"> Seleccion de variables <b>Boruta</b></p></h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\sklearn\\utils\\validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n",
      "C:\\Users\\mgaviria\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\boruta\\boruta_py.py:384: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator.fit(X, y)\n"
     ]
    }
   ],
   "source": [
    "boruta_vars = sel.Boruta(X_base_con_imputaciones,y_base_con_imputaciones, type = \"reg\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['cyl', 'disp', 'hp', 'wt']\n",
      "['random_normal']\n",
      "['drat', 'qsec', 'vs', 'am', 'gear', 'carb', 'random_uniforme']\n"
     ]
    }
   ],
   "source": [
    "### Variables escogidas, d√©biles, y desechadas por Boruta\n",
    "print(boruta_vars.vars_aceptadas)\n",
    "print(boruta_vars.vars_debiles)\n",
    "print(boruta_vars.vars_basura)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3><p style=\"color:gold\"> Seleccion de Variables por <b>Correlacion</b> </p></h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# en la lista de variables_categoricas se debe poner el nombre de las variables categoricas, como las marcas por ejemplo\n",
    "nombre_iteracion = 'iteracion1'\n",
    "variables_categoricas = [\"model\"]\n",
    "# poner ac√° la base sin imputaciones. base_sin_imputaciones debe tener la base con todas las variables explicativas sin imputar\n",
    "base_sin_imputaciones = base_train_sample[feats_todas]\n",
    "#base_sin_imputaciones=base_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Calculando correlaciones ---\n",
      "Escribiendo reporte...\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 792x720 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Ejecuta correlaciones. Busca correlaciones dependiendo el tipo de variable (si es continua o categorica)\n",
    "# Este proceso se hace con la base sin imputaciones\n",
    "plt.figure(figsize=(11, 10))\n",
    "corr_par = sel.correlaciones_parejas( nombre_iteracion, base_sin_imputaciones, variables_categoricas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteracion 2\n",
      "Iteracion 3\n",
      "Iteracion 4\n",
      "  variable  ronda\n",
      "0       vs      1\n",
      "1     carb      1\n",
      "2     gear      1\n",
      "0      cyl      2\n",
      "1     qsec      2\n",
      "2       am      2\n",
      "0     drat      3\n",
      "0     disp      4\n"
     ]
    }
   ],
   "source": [
    "# Se corre el proceso que toma el listado de las variables rankeadas y la matriz de correlacion y arroja un df con las \n",
    "# variables a eliminar\n",
    "varsalen = sel.depuracion_vars_correlacionadas_corr(nombre_iteracion, corr_par, res_sel_features)\n",
    "# definicion final de las variables con las cuales empezar√° el entrenamiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# finalmente, se itera sobre las variables de la base para descartar las variables que se obtuvieron arriba\n",
    "feats_train = [e for e in base_sin_imputaciones.columns if e not in  list(varsalen['variable'])]\n",
    "feats_train = list(set(feats_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hp', 'wt']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# variables finales con las que se inicia el proceso de entrenamiento\n",
    "feats_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "e0960049bbb56f24cf3e01323cf80c622ae345678b56b4f2fc442636d40c5882"
  },
  "kernelspec": {
   "display_name": "Python 3.7.2 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
